#!/bin/bash

if [ ! "$(grep node_modules/ ~/.gitignore)" ]; then
  echo "node_modules/" >> .gitignore
fi

function svn() {

    if [ "$(grep password ~/.subversion/auth/svn.simple/*)" ]; then
      rm -rf ~/.subversion/auth/svn.simple/*
      rm -rf ~/.c9/metadata/environment/.subversion/auth/svn.simple/*
      sqlite3 ~/.c9/*/collab.v3.db "DELETE FROM Revisions WHERE document_id IN (SELECT id FROM Documents WHERE path LIKE '%subversion/auth/svn.simple%'); DELETE FROM Documents WHERE path LIKE '%subversion/auth/svn.simple%';"
      echo -e '\nstore-passwords = no\nstore-ssl-client-cert-pp = no\nstore-plaintext-passwords = no\nstore-ssl-client-cert-pp-plaintext = no' >> ~/.subversion/servers
    fi

    if [ ! "$(type -f svn)" ]; then
      sudo apt install -y subversion
      command svn propset svn:ignore node_modules .
      echo -e "\nSubversion Installed\n\n\n\n\n\n"
    fi

    args=( "$@" )
    command svn "${args[@]}"

}

function express() {

    if [ ! "$(type -f express)" ]; then
      sudo npm install -g express-generator
      echo -e "\nExpress Generator Installed\n\n\n\n\n\n"
    fi

    args=( "$@" )
    command express "${args[@]}"

}

function eslint() {

    if [ ! "$(type -f eslint)" ]; then
      sudo npm install -g eslint
      echo -e "\nESLint Installed\n\n\n\n\n\n"
    fi

    args=( "$@" )
    command eslint "${args[@]}"

}

function vnu() {

    if [ ! -f "~/vnu.jar" ]; then
      curl -Lo /tmp/vnu.jar.zip https://github.com/validator/validator/releases/download/18.11.5/vnu.jar_18.11.5.zip
      unzip -d /tmp /tmp/vnu.jar.zip
      cp /tmp/dist/vnu.jar ~/
      rm -rf /tmp/dist
    fi

    args=( "$@" )
    java -jar ~/vnu.jar "${args[@]}"

}

export SQLDATDIR=/home/ubuntu/sql_data
export SQLTMPDIR=/tmp/sql_files

# WDC SQL Server Setup Script -- v2.0 January 2020
# Written by Ian Knight

# Function to stop running sql server
function stop_sql() {
    printf "\n\033[1mExiting...\033[0m\n"
    killall -SIGTERM mysqld
    # Wait up to 20s until sock & pid files removed
    COUNTER=0
    while [  $COUNTER -lt 20 ]; do
        if [ -e "$SQLTMPDIR/mysql.sock" -o -e "$SQLTMPDIR/mariadb.pid" ]; then
            sleep 1
            ((COUNTER++))
        else
            COUNTER=20
        fi
    done
    printf "Don't forget to backup your Databases!\n"
    SQLPID=0
}

function start_sql() {

    if [ ! "$(command -v mysqld_safe)" ]; then
      sudo apt install -y mysql-server
      echo -e "\nSQL Server Installed\n\n\n\n\n\n"
    fi

    SQLINIT=0

    if [ ! -d "$SQLDATDIR" ]; then
        # Database not setup yet, do install
        mkdir "$SQLDATDIR"
        mkdir "$SQLTMPDIR"
        chmod 777 "$SQLDATDIR"
        chmod 777 "$SQLTMPDIR"
        printf '\n\033[1mInstalling SQL database files...\033[0m\n'
        mysqld --initialize-insecure --log-error="$SQLTMPDIR/mariadb.log" --basedir=/usr --innodb_log_file_size=16M --innodb_log_group_home_dir="$SQLTMPDIR" --datadir="$SQLDATDIR" --user=$USER
        SQLINIT=1
    fi

    # Check if SQL Server running or exited uncleanly
    # Wait up to 20s until sock & pid files created
    printf 'Checking no existing sql processes running... '
    COUNTER=0
    STAGE=0
    while [  $COUNTER -lt 20 ]; do
        if [ -e "$SQLTMPDIR/mysql.sock" -o -e "$SQLTMPDIR/mariadb.pid" ]; then

            if [ $STAGE = 0 -a $COUNTER = 0 ]; then
                printf '\n\033[1;91mSQL Server still running or exited uncleanly!\033[0m\n'
                printf 'Terminating existing sql processes... '
                killall -SIGTERM mysqld &> /dev/null
                STAGE=1
            elif [ $STAGE = 1 -a $COUNTER = 7 ]; then
                printf '\033[1;91mFAIL\033[0m\n'
                printf 'Forcibly killing existing sql processes... '
                killall -SIGKILL mysqld_safe &> /dev/null
                killall -SIGKILL mysqld &> /dev/null
                STAGE=2
            elif [ $STAGE = 2 -a $COUNTER = 15 ]; then
                printf '\033[1;91mFAIL\033[0m\n'
                printf 'Manually cleaning... '
                rm -f $SQLTMPDIR/mysql.sock $SQLTMPDIR/mariadb.pid &> /dev/null
                STAGE=3
            elif [ $COUNTER = 19 ]; then
                printf '\033[1;93mUnsuccessful. If sql server does not start, restart your IDE.\033[0m\n\n'
            fi
            sleep 1
            ((COUNTER++))
        else
            printf ' \033[1;92mOK\033[0m \n\n'
            COUNTER=20
        fi
    done

    # Start SQL Server
    printf "\033[1mStarting SQL Server...\033[0m\n"
    mysqld_safe --no-defaults --datadir="$SQLDATDIR" --log-error="$SQLDATDIR/mariadb.log" --lc-messages-dir=/usr/share/mysql/english/ --innodb_log_file_size=16M --innodb_log_group_home_dir="$SQLTMPDIR" --pid-file="$SQLTMPDIR/mariadb.pid" --socket="$SQLTMPDIR/mysql.sock" &
    #mysqld_safe --no-defaults --datadir="$SQLDATDIR" --log-error=mariadb.log --pid-file=mariadb.pid --socket=mysql.sock &
    SQLPID=$!

    # Wait up to 20s until sock & pid files created
    COUNTER=0
    while [  $COUNTER -lt 20 ]; do
        if [ -e "$SQLTMPDIR/mysql.sock" -a -e "$SQLTMPDIR/mariadb.pid" ]; then
            COUNTER=20
        else
            sleep 1
            ((COUNTER++))
        fi
    done

    # If sock & pid files have been created running okay, else exit
    if [ -e "$SQLTMPDIR/mysql.sock" -a -e "$SQLTMPDIR/mariadb.pid" ]; then
        if [ $SQLINIT = 1 ]; then
            # Finish initialising database
            printf '\033[1mFinalising install... \033[0m\nSetting up privileges... '
            echo -e "CREATE USER ''@'localhost'; GRANT ALL PRIVILEGES ON *.* TO ''@'localhost'; FLUSH PRIVILEGES;\n" | \
            mysql --no-defaults --socket="$SQLTMPDIR/mysql.sock" --user=root
            printf ' \033[1;92mOK\033[0m \n\n'
        fi
        printf "\033[1;92mSQL Server Running.\033[0m\nUse stop_sql to stop the server"
    else
        printf '\033[1;91mSQL Server Failed to start!\033[0m\n'
        stop_sql
    fi

}

export -f svn
export -f express
export -f eslint
export -f vnu
export -f stop_sql
export -f start_sql

